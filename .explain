given the input A1->A2+A3
    start the parser
        tokenize input into a list of tokens
        parse tokens into a tree
        start the binder with an internal global scope for storing the name declarations
            bind the tree
                if tree is a program
                    bind all tree statements in the program
                    check the validity of the name declarations in the scope
                    and finally return the bound program
                if tree is a cell reference
                    generate name for the tree
                    if name already exists in the scope
                        simply get the bound cell found in the scope and return it
                    else
                        create a cell and store it in the scope with using the same name
                        state that it is not declared since by default they are not referenced by any other cell in this context
                        and return this bound cell
                if tree is a cell reference assignment
                    if reference in the assignment is not a cell reference
                        report that the reference cannot be of this reference kind
                        return a default bound tree
                    else
                        bind the cell reference of this assignment tree
                        build a new scope environment to store other cells that will be used as dependecies
                            set current scope to be the parent of this new scope
                            set this new scope to be the current scope temporarily
                            bind the expression tree found in this tree
                            get any cells that are store in this new scope during expression binding
                                for each as dependency let the reference in this tree watch these dependecies for any changes in value by storing them within the cell reference
                                    decide if you want to automatically declare undeclared cells
                                        if not
                                            check if dependency is already declared
                                            and if it is not then report an error that informs the user that this undeclared dependency has been referenced
                                        if yes
                                            mark dependency automatically as declared and move this dependency from this scope to the parent scope so that it can later be found while checking the validity of declarations at the final stage after binding the program
                                            and report an info that shows that this dependency has been automatically added after being referenced by the cell reference
                            set the parent of this new scope back to being the current scope
                            mark the cell reference as declared
                            and then bound assignment tree

