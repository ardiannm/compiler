A1 -> 1
A2 -> A1+3
A3 -> A1+A2+4
A4 -> A1+A2+A3+5
A3 -> 6
A1 -> 3
A2 -> 4
A4 -> 0
A2 -> 7
A1


# test case for switching operators within parenthesized expressions before removing parenthesis tokens

1+2+3+4+5+6+7           "c90f367a"

-(1-2)+3+4-(5-6-7)      
-(1-2)+3+4--(5-6-7)

-(1-2)+3+4+-(5-6-7)     "c90f367a"
-(-(1+2+3))+4+5+6+7     "c90f367a"

# this leads to the necessity to have a method that turns a tree back into a string
# else the equality of the two can be proven by checking both nodes ids using ObjectId
# id of rewriten "-(1-2)+3+4+-(5-6-7)" should be the same to the object id of "1+2+3+4+5+6+7"
# and indeed "c90f367a" is the same for both but this also leads to the necessity of writing tests
# so is this "-(-(1+2+3))+4+5+6+7"



# ++++++++++++++-----------------++++++++A1



1-(2-(-4))

 -Program
   Root
   -BinaryExpression
     Left
     -BinaryExpression
       Left
       -NumberToken
         Text 1
       Operator
       -PlusToken
         Text +
       Right
       -UnaryExpression
         Operator
         -MinusToken
           Text -
         Right
         -NumberToken
           Text 2
     Operator
     -MinusToken
       Text -
     Right
     -NumberToken
       Text 4





1-(1-2)

 -Program
   Root
   -BinaryExpression
     Left
     -BinaryExpression
       Left
       -NumberToken
         Text 1
       Operator
       -PlusToken
         Text +
       Right
       -UnaryExpression
         Operator
         -MinusToken
           Text -
         Right
         -NumberToken
           Text 1
     Operator
     -MinusToken
       Text -
     Right
     -UnaryExpression
       Operator
       -MinusToken
         Text -
       Right
       -NumberToken
         Text 2